sub(".*Model 2: ", "", attr(anova(model1, model2), "heading")[2]),
round(anova(model1, model2)$"Pr(>F)"[2], 3))
lmfits <- rbind(lmfits, x)
}
lmfits <- lmfit.table(model1, model2)
lmfits$Model1 <- as.character(lmfits$Model1)
lmfits$Model2 <- as.character(lmfits$Model2)
lmfits$Change <- as.numeric(lmfits$Change)
lmfits <- lmfit.table(model2, model3)
View(lmfits)
lmfits <- data.frame(Model1 = character(), Model2 = character(), Change = numeric())
lmfit.table <- function(model1, model2, ...) {
x <- c(sub("Model 1: .* *.Model 2: ", "", attr(anova(model1, model2), "heading")[2]),
sub(".*Model 2: ", "", attr(anova(model1, model2), "heading")[2]),
round(anova(model1, model2)$"Pr(>F)"[2], 3))
lmfits <- rbind(lmfits, x)
}
lmfits <- lmfit.table(model1, model2)
names(lmfits) <- c("Model1", "Model2", "Change")
View(lmfits)
lmfits$Model1 <- as.character(lmfits$Model1)
lmfits$Model2 <- as.character(lmfits$Model2)
lmfits$Change <- as.numeric(lmfits$Change)
class(lmfits$Model1)
class(lmfits$Model2)
class(lmfits$Change)
lmfits <- lmfit.table(model2, model3)
View(lmfits)
lmfits <- lmfit.table(model3, model4)
View(lmfits)
lmfits <- data.frame(Model1 = character(), Model2 = character(), Change = numeric())
lmfit.table <- function(model1, model2, ...) {
x <- c(sub("Model 1: .* *.Model 2: ", "", attr(anova(model1, model2), "heading")[2]),
sub(".*Model 2: ", "", attr(anova(model1, model2), "heading")[2]),
round(anova(model1, model2)$"Pr(>F)"[2], 3))
lmfits <- rbind(lmfits, x)
}
lmfits <- lmfit.table(model1, model2)
View(lmfits)
names(lmfits) <- c("Model1", "Model2", "Change")
View(lmfits)
lmfits$Model1 <- as.character(lmfits$Model1)
lmfits$Model2 <- as.character(lmfits$Model2)
View(lmfits)
lmfits$Change <- as.numeric(lmfits$Change)
View(lmfits)
lmfits <- data.frame(Model1 = character(), Model2 = character(), Change = numeric())
lmfit.table <- function(model1, model2, ...) {
x <- c(sub("Model 1: .* *.Model 2: ", "", attr(anova(model1, model2), "heading")[2]),
sub(".*Model 2: ", "", attr(anova(model1, model2), "heading")[2]),
round(anova(model1, model2)$"Pr(>F)"[2], 3))
lmfits <- rbind(lmfits, x)
}
lmfits <- lmfit.table(model1, model2)
names(lmfits) <- c("Model1", "Model2", "Change")
lmfits$Model1 <- as.character(lmfits$Model1)
lmfits$Model2 <- as.character(lmfits$Model2)
class(lmfits$Change)
lmfits$Change <- as.numeric(as.character(lmfits$Change))
View(lmfits)
class(lmfits$Change)
lmfits <- lmfit.table(model2, model3)
lmfits <- lmfit.table(model3, model4)
lmfits <- lmfit.table(model3, model5)
lmfits <- lmfit.table(model3, model6)
lmfits <- lmfit.table(model3, model7)
lmfits <- lmfit.table(model3, model8)
lmfits <- lmfit.table(model8, model9)
View(lmfits)
View(lmfits)
sub("Model 1: .* *.Model 2: ", "", attr(anova(model1, model2), "heading")[2])
sub("*.Model 2: ", "", attr(anova(model1, model2), "heading")[2])
sub("*Model 2: ", "", attr(anova(model1, model2), "heading")[2])
sub(".Model 2: ", "", attr(anova(model1, model2), "heading")[2])
sub(".Model 2: *", "", attr(anova(model1, model2), "heading")[2])
sub(".Model 2: *.", "", attr(anova(model1, model2), "heading")[2])
sub(".Model 2: .*", "", attr(anova(model1, model2), "heading")[2])
sub("Model 2: .*", "", attr(anova(model1, model2), "heading")[2])
sub(".Model 2: .*", "", attr(anova(model1, model2), "heading")[2])
sub(".Model 2: .*" & "Model 1: ", "", attr(anova(model1, model2), "heading")[2])
sub(".Model 2: .* & Model 1: ", "", attr(anova(model1, model2), "heading")[2])
sub(".Model 2: .*|Model 1: ", "", attr(anova(model1, model2), "heading")[2])
sub(c(".Model 2: .*" "Model 1: "), "", attr(anova(model1, model2), "heading")[2])
sub(c(".Model 2: .*", "Model 1: "), "", attr(anova(model1, model2), "heading")[2])
sub(".Model 2: .*", "", attr(anova(model1, model2), "heading")[2])
subset(attr(anova(model1, model2), "heading")[2], sub(".Model 2: .*", ""))
subset(attr(anova(model1, model2), "heading")[2], sub(".Model 2: .*", "", .))
subset(attr(anova(model1, model2), "heading")[2], sub(".Model 2: .*", "", attr(anova(model1, model2)))
)
help(stringr)
library(stringr)
help(stringr)
str_replace(attr(anova(model1, model2), "heading")[2], c(".Model 2: .*", "Model 1: "), "")
str_replace(attr(anova(model1, model2), "heading")[2], c("Model 2: ", "Model 1: "), "")
str_replace_all(attr(anova(model1, model2), "heading")[2], c("Model 2: ", "Model 1: "), "")
str_replace_all(attr(anova(model1, model2), "heading")[2], c("Model 2: ", "Model 1: "), "")
str_replace_all(attr(anova(model1, model2), "heading")[2], c("Model 2:", "Model 1:"), "")
attr(anova(model1, model2), "heading")[2]
sub("Model 1 :([a-z]+).*$", "", attr(anova(model1, model2), "heading")[2]))
sub("Model 1 :([a-z]+).*$", "", attr(anova(model1, model2), "heading")[2])
sub("Model 1 :", "", attr(anova(model1, model2), "heading")[2])
sub("Model 1:", "", attr(anova(model1, model2), "heading")[2])
sub("Model 1: ", "", attr(anova(model1, model2), "heading")[2])
models <- attr(anova(model1, model2), "heading")[2]
sub(".*Model 2: ", "", models)
sub("Model 1:", "", models)
sub("Model 1: ", "", models)
models2 <- sub("Model 1: ", "", models)
models2 <- sub("/n*.", "", models)
models2
models2 <- sub("\n*.", "", models)
models2
sub("\n*", "", models)
sub("\n?*.", "", models)
sub("\n.*, "", models)
)
)
sub("\n.*", "", models)
sub("\\n.*", "", models)
models <- sub("Model 1: ", "", attr(anova(model1, model2), "heading")[2])
models
sub("\\n.*", "", models)
sub(".*Model 2: ", "", models)
lmfits <- data.frame(Model1 = character(), Model2 = character(), Change = numeric())
lmfit.table <- function(model1, model2, ...) {
models <- sub("Model 1: ", "", attr(anova(model1, model2), "heading")[2])
x <- c(sub("\\n.*", "", models),
sub(".*Model 2: ", "", models),
round(anova(model1, model2)$"Pr(>F)"[2], 3))
lmfits <- rbind(lmfits, x)
}
lmfits <- lmfit.table(model1, model2)
names(lmfits) <- c("Model1", "Model2", "Change")
lmfits$Model1 <- as.character(lmfits$Model1)
lmfits$Model2 <- as.character(lmfits$Model2)
lmfits$Change <- as.numeric(as.character(lmfits$Change))
lmfits <- lmfit.table(model2, model3)
lmfits <- lmfit.table(model3, model4)
lmfits <- lmfit.table(model3, model5)
lmfits <- lmfit.table(model3, model6)
lmfits <- lmfit.table(model3, model7)
lmfits <- lmfit.table(model3, model8)
lmfits <- lmfit.table(model8, model9)
lmfits <- lmfit.table(model8, model9)
View(lmfits)
View(lmfits)
lmfits <- lmfit.table(model1, model2)
names(lmfits) <- c("Model1", "Model2", "Change")
lmfits$Model1 <- as.character(lmfits$Model1)
lmfits$Model2 <- as.character(lmfits$Model2)
lmfits$Change <- as.numeric(as.character(lmfits$Change))
lmfits <- lmfit.table(model2, model3)
lmfits <- lmfit.table(model3, model4)
lmfits <- lmfit.table(model3, model5)
lmfits <- lmfit.table(model3, model6)
lmfits <- lmfit.table(model3, model7)
lmfits <- lmfit.table(model3, model8)
lmfits <- lmfit.table(model8, model9)
lmfits <- lmfit.table(model2, model10)
View(lmfits)
lmfits <- data.frame(Model1 = character(), Model2 = character(), Change = numeric())
lmfit.table <- function(model1, model2, ...) {
models <- sub("Model 1: ", "", attr(anova(model1, model2), "heading")[2])
x <- c(sub("\\n.*", "", models),
sub(".*Model 2: ", "", models),
round(anova(model1, model2)$"Pr(>F)"[2], 3))
lmfits <- rbind(lmfits, x)
}
lmfits <- lmfit.table(model1, model2)
names(lmfits) <- c("Model1", "Model2", "Change")
lmfits$Model1 <- as.character(lmfits$Model1)
lmfits$Model2 <- as.character(lmfits$Model2)
lmfits$Change <- as.numeric(as.character(lmfits$Change))
lmfits <- lmfit.table(model2, model3)
lmfits <- lmfit.table(model3, model4)
lmfits <- lmfit.table(model3, model5)
lmfits <- lmfit.table(model3, model6)
lmfits <- lmfit.table(model3, model7)
lmfits <- lmfit.table(model3, model8)
lmfits <- lmfit.table(model8, model9)
lmfits <- lmfit.table(model2, model10)
View(lmfits)
lmfits <- data.frame(Model1 = character(), Model2 = character(), Change = numeric())
lmfit.table <- function(model1, model2, ...) {
models <- sub("Model 1: ", "", attr(anova(model1, model2), "heading")[2])
x <- c(sub("\\n.*", "", models),
sub(".*Model 2: ", "", models),
round(anova(model1, model2)$"Pr(>F)"[2], 3))
lmfits <- rbind(lmfits, x)
}
lmfits <- lmfit.table(model1, model2)
lmfits$Model1 <- as.character(lmfits$Model1)
lmfits$Model2 <- as.character(lmfits$Model2)
lmfits$Change <- as.numeric(as.character(lmfits$Change))
colnames(lmfits)
View(lmfits)
lmfits <- data.frame(Model1 = character(), Model2 = character(), Change = numeric())
lmfit.table <- function(model1, model2, ...) {
models <- sub("Model 1: ", "", attr(anova(model1, model2), "heading")[2])
x <- c(sub("\\n.*", "", models),
sub(".*Model 2: ", "", models),
round(anova(model1, model2)$"Pr(>F)"[2], 3))
lmfits <- rbind(lmfits, x)
}
lmfits <- lmfit.table(model1, model2)
lmfits$X.mpg...am.f. <- as.character(lmfits$X.mpg...am.f.)
lmfits$X.mpg...am.f...wt. <- as.character(lmfits$X.mpg...am.f...wt.)
lmfits$X.0. <- as.numeric(as.character(lmfits$X.0.))
lmfits <- lmfit.table(model2, model3)
lmfits <- lmfit.table(model3, model4)
lmfits <- lmfit.table(model3, model5)
lmfits <- lmfit.table(model3, model6)
lmfits <- lmfit.table(model3, model7)
lmfits <- lmfit.table(model3, model8)
lmfits <- lmfit.table(model8, model9)
lmfits <- lmfit.table(model2, model10)
View(lmfits)
names(lmfits) <- c("Model 1", "Model 2", "p-value of model improvement")
View(lmfits)
summary(model10); summary(model8)
summary(model10); summary(model8)
vif(model10); vif(model8)
summary(model10); vif(model10)
summary(model8); vif(model8)
summary(model10); vif(model10)
summary(model8); vif(model8)
str(summary(model10))
round(summary(model10)$r.squared, 3)
round(summary(model8)$r.squared, 3)
cor(mtcars$wt, mtcars$cyl)
View(lmfits)
115 * 1.5
plot(final.model)
head(sort(round(hatvalues(final.model), 3), decreasing = TRUE))
head(sort(round(abs(dfbetas(final.model)[, 2]), 3), decreasing = TRUE))
g1 <- gp + geom_text(data=subset(mtcars, abs(hatvalues) > 0.26),
aes(wt,mpg,label=name), size = 4, hjust=1, vjust=0) +
ggtitle("Three Points with Highest Leverage (hatvalues)")
g1
g1 <- gp + geom_text(data=subset(mtcars, abs(hatvalues) > 0.17),
aes(wt,mpg,label=name), size = 4, hjust=1, vjust=0) +
ggtitle("Three Points with Highest Leverage (hatvalues)")
g1
g2 <- gp + geom_text(data=subset(mtcars, abs(dfbetas) > 0.21),
aes(wt,mpg,label=name), size = 4, hjust=1, vjust=0) +
ggtitle("Three Points with Highest Influence (dfbetas)")
g2
sort(round(hatvalues(final.model), 3), decreasing = TRUE)
g1 <- gp + geom_text(data=subset(mtcars, abs(hatvalues) > 0.21),
aes(wt,mpg,label=name), size = 4, hjust=1, vjust=0) +
ggtitle("Three Points with Highest Leverage (hatvalues)")
g1
g1 <- gp + geom_text(data=subset(mtcars, abs(hatvalues) > 0.17),
aes(wt,mpg,label=name), size = 4, hjust=1, vjust=0) +
ggtitle("Three Points with Highest Leverage (hatvalues)")
g1
g1 <- gp + geom_text(data=subset(mtcars, abs(hatvalues) > 0.21),
aes(wt,mpg,label=name), size = 4, hjust=1, vjust=0) +
ggtitle("Three Points with Highest Leverage (hatvalues)")
g1
g2 <- gp + geom_text(data=subset(mtcars, abs(dfbetas) > 0.17),
aes(wt,mpg,label=name), size = 4, hjust=1, vjust=0) +
ggtitle("Three Points with Highest Influence (dfbetas)")
g2
tapply(mtcars$wt, mtcars$am.f, summary)
r(min(mtcars$wt[mtcars$am] == 0)
)
min(mtcars$wt[mtcars$am] == 0)
min(mtcars$wt[mtcars$am == 0])
summary(final.model)
sumCoef <- summary(final.model)$coefficients
sumCoef[1, 1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
sumCoef[1, 1] + c(-1, 1) * qt(.975, df = final.model$df) * sumCoef[1, 2]
sumCoef
b3 <- sumCoef[2, 1] + c(-1, 1) * qt(.975, df = final.model$df) * sumCoef[3, 2]
b2 <- sumCoef[2, 1] + c(-1, 1) * qt(.975, df = final.model$df) * sumCoef[3, 2]
intercept + b2
intercept.ci <- sumCoef[1, 1] + c(-1, 1) * qt(.975, df = final.model$df) * sumCoef[1, 2]
b2.ci <- sumCoef[2, 1] + c(-1, 1) * qt(.975, df = final.model$df) * sumCoef[3, 2]
intercept.ci + b2.ci
g1 <- ggplot(data=mtcars$mpg, aes(mtcars$mpg)) +
geom_histogram(aes(y = ..density..), binwidth = 0.5,
col = "#086199",
fill = "#0971B2") +
xlab("Mean of each sample") +
ylab("Density") +
theme_bw() +
ggtitle("Distribution of Means of 1,000 Samples") +
theme(plot.title = element_text(lineheight=.8, face="bold")) +
geom_line(aes(y = ..density.., colour = "Empirical"), stat = "density") +
stat_function(fun = dnorm, aes(colour = "Normal"),
arg = list(mean = 220, sd = sd(mn_vector))) +
scale_colour_manual(name = "Density", values = c("#B21212", "black"))
class(mtcars$mpg)
g1 <- ggplot(data=as.data.frame(mtcars$mpg), aes(mtcars$mpg)) +
geom_histogram(aes(y = ..density..), binwidth = 0.5,
col = "#086199",
fill = "#0971B2") +
xlab("Mean of each sample") +
ylab("Density") +
theme_bw() +
ggtitle("Distribution of Means of 1,000 Samples") +
theme(plot.title = element_text(lineheight=.8, face="bold")) +
geom_line(aes(y = ..density.., colour = "Empirical"), stat = "density") +
stat_function(fun = dnorm, aes(colour = "Normal"),
arg = list(mean = 220, sd = sd(mn_vector))) +
scale_colour_manual(name = "Density", values = c("#B21212", "black"))
g1 <- ggplot(data=as.data.frame(mtcars$mpg), aes(mtcars$mpg)) +
geom_histogram(aes(y = ..density..), binwidth = 0.5,
col = "#086199",
fill = "#0971B2") +
xlab("Mean of each sample") +
ylab("Density") +
theme_bw() +
ggtitle("Distribution of Means of 1,000 Samples") +
theme(plot.title = element_text(lineheight=.8, face="bold")) +
geom_line(aes(y = ..density.., colour = "Empirical"), stat = "density") +
stat_function(fun = dnorm, aes(colour = "Normal"),
arg = list(mean = mean(mtcars$mpg), sd = sd(mtcars$mpg))) +
scale_colour_manual(name = "Density", values = c("#B21212", "black"))
g1
g1 <- ggplot(data=as.data.frame(mtcars$mpg), aes(mtcars$mpg)) +
geom_histogram(aes(y = ..density..), binwidth = 2,
col = "#086199",
fill = "#0971B2") +
xlab("Miles per gallon") +
ylab("Density") +
theme_bw() +
ggtitle("Distribution of MPG") +
theme(plot.title = element_text(lineheight=.8, face="bold")) +
geom_line(aes(y = ..density.., colour = "Empirical"), stat = "density") +
stat_function(fun = dnorm, aes(colour = "Normal"),
arg = list(mean = mean(mtcars$mpg), sd = sd(mtcars$mpg))) +
scale_colour_manual(name = "Density", values = c("#B21212", "black"))
g1
final.model.auto <- lm(mpg ~ I(wt - mean(wt)), data = mtcars[mtcars$af == 0])
final.model.auto <- lm(mpg ~ I(wt - mean(wt)), data = mtcars[mtcars$am == 0])
final.model.auto <- lm(mpg ~ I(wt - mean(wt)), data = mtcars[mtcars$am == 0, ])
final.model.auto
summary(final.model.auto)
final.model.auto <- lm(mpg ~ I(wt - mean(wt)), data = mtcars[mtcars$am == 1, ])
final.model.auto <- lm(mpg ~ I(wt - mean(wt)), data = mtcars[mtcars$am == 0, ])
final.model.manual <- lm(mpg ~ I(wt - mean(wt)), data = mtcars[mtcars$am == 1, ])
summary(final.model.manual)
mean.cars <- data.frame(wt = c(mean(mtcars$wt)))
View(mean.cars)
final.model.auto <- lm(mpg ~ I(wt - mean(wt)), data = mtcars[mtcars$am == 0, ])
final.model.manual <- lm(mpg ~ I(wt - mean(wt)), data = mtcars[mtcars$am == 1, ])
mean.cars <- data.frame(wt = c(mean(mtcars$wt)))
new.cars <- data.frame(wt = c(2, 4))
predict(final.model.auto, newdata = mean.cars, interval = ("confidence"))
predict(final.model.manual, newdata = mean.cars, interval = ("confidence"))
predict(final.model.auto, newdata = new.cars, interval = ("prediction"))
predict(final.model.manual, newdata = new.cars, interval = ("prediction"))
summary(final.model.manual)
mn <- mean(mtcars$wt)
final.model.auto <- lm(mpg ~ I(wt - mn), data = mtcars[mtcars$am == 0, ])
final.model.manual <- lm(mpg ~ I(wt - mn), data = mtcars[mtcars$am == 1, ])
summary(final.model.auto)
summary(final.model.manual)
mean.cars <- data.frame(wt = c(mean(mtcars$wt)))
new.cars <- data.frame(wt = c(2, 4))
predict(final.model.auto, newdata = mean.cars, interval = ("confidence"))
predict(final.model.manual, newdata = mean.cars, interval = ("confidence"))
auto.ci <- predict(final.model.auto, newdata = mean.cars, interval = ("confidence"))
class(auto.ci)
auto.ci[1]
round(auto.ci[2], 2)
round(auto.ci[2], 3)
round(auto.ci[3], 2
)
auto.predict.ci
auto.predict.ci <- predict(final.model.auto, newdata = new.cars, interval = ("prediction"))
manual.predict.ci <- predict(final.model.manual, newdata = new.cars, interval = ("prediction"))
auto.predict.ci
auto.predict.ci[2,1]
auto.predict.ci[1,2]
summary(final.model)
model1
vif(model8)
vif(model8)[ ,1]
vif(model10)
vif(model8)[ ,1]
vif(model10); vif(model8)[ ,1]
g <- ggplot(mtcars, aes(am.f, mpg)) +
geom_boxplot(aes(fill = am.f)) +
geom_jitter() +
ylab("Miles per gallon") +
xlab("\nTransmission type") +
theme_bw() +
scale_colour_manual(name="Transmission",  values =c("#B21212", "#0971B2")) +
g
g <- ggplot(mtcars, aes(am.f, mpg)) +
geom_boxplot(aes(fill = am.f)) +
geom_jitter() +
ylab("Miles per gallon") +
xlab("\nTransmission type") +
theme_bw() +
scale_colour_manual(name="Transmission",  values =c("#B21212", "#0971B2"))
g
g <- ggplot(mtcars, aes(am.f, mpg, fill = am.f)) +
geom_boxplot(aes(fill = am.f), color) +
geom_jitter() +
ylab("Miles per gallon") +
xlab("\nTransmission type") +
theme_bw() +
scale_fill_manual(name="Transmission",  values =c("#B21212", "#0971B2"))
g
g <- ggplot(mtcars, aes(am.f, mpg, fill = am.f)) +
geom_boxplot(aes(fill = am.f)) +
geom_jitter() +
ylab("Miles per gallon") +
xlab("\nTransmission type") +
theme_bw() +
scale_fill_manual(name="Transmission",  values =c("#B21212", "#0971B2"))
g
# Read in test data
test <- read.csv(url("http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/test.csv"))
# Apply the model to the test data
predict.test <- predict(object = model.single, newdata = test)
# Create a data frame with just PassengerId and Survived to submit to Kaggle. Note that I assign "predict.test" to "Survived"
titanic.solution <- data.frame(PassengerId = test$PassengerId, Survived = predict.test)
# Write your solution to a csv file with the name my_solution.csv
write.csv(titanic.solution, file = "titanic.solution.csv", row.names = FALSE)
getwd()
setwd("/Users/jburchell/Titanic Kaggle Comps/")
train <- read.csv(url("http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/train.csv"))
library(rpart); library(caret)
model.single <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = train, method = "class")
predict.single <- predict(object = model.single, newdata = train, type = "class")
library(RGtk2); library(cairoDevice); library(rattle); library(rpart.plot); library(RColorBrewer)
fancyRpartPlot(model.single)
confusionMatrix(predict.single, train$Survived)
k.folds <- function(k) {
folds <- createFolds(train$Survived, k = k, list = TRUE, returnTrain = TRUE)
for (i in 1:k) {
model <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = train[folds[[i]],], method = "class")
predictions <- predict(object = model, newdata = train[-folds[[i]],], type = "class")
accuracies.dt <- c(accuracies.dt,
confusionMatrix(predictions, train[-folds[[i]], ]$Survived)$overall[[1]])
}
accuracies.dt
}
set.seed(567)
accuracies.dt <- c()
accuracies.dt <- k.folds(5)
accuracies.dt
mean.accuracies <- mean(accuracies.dt)
set.seed(567)
v <- c()
v <- replicate(200, k.folds(5))
accuracies.dt <- c()
for (i in 1 : 200) {
accuracies.dt <- c(accuracies.dt, v[,i])
}
mean.accuracies <- mean(accuracies.dt)
lci <- mean(accuracies.dt) - sd(accuracies.dt) * 1.96
uci <- mean(accuracies.dt) + sd(accuracies.dt) * 1.96
require(ggplot2)
line1 <- data.frame(Values="95% CI", vals = c(lci, uci))
line2 <- data.frame(Values="Mean accuracy", vals = mean(accuracies.dt))
lines <- rbind(line1, line2)
# Set the colours for the graphs
barfill <- "#4271AE"
barlines <- "#1F3552"
col1 <- "black"
col2 <- "#FF3721"
ggplot(data=as.data.frame(accuracies.dt), aes(accuracies.dt)) +
geom_histogram(aes(y = ..density..),
binwidth = 0.02, fill = barfill, colour = barlines) +
xlab("Accuracy estimates") +
ylab("Density") +
theme_bw() +
geom_vline(data=lines, aes(xintercept=vals, linetype = Values,
colour = Values), size = 1, show_guide = TRUE) +
scale_color_manual(values=c("95% CI" = col1,
"Mean accuracy" = col2))
# Read in test data
test <- read.csv(url("http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/test.csv"))
# Apply the model to the test data
predict.test <- predict(object = model.single, newdata = test)
# Create a data frame with just PassengerId and Survived to submit to Kaggle. Note that I assign "predict.test" to "Survived"
titanic.solution <- data.frame(PassengerId = test$PassengerId, Survived = predict.test)
# Write your solution to a csv file with the name my_solution.csv
write.csv(titanic.solution, file = "titanic.solution.csv", row.names = FALSE)
predict.test <- predict(object = model.single, newdata = test)
# Create a data frame with just PassengerId and Survived to submit to Kaggle. Note that I assign "predict.test" to "Survived"
titanic_solution <- data.frame(PassengerId = test$PassengerId, Survived = predict.test)
# Write your solution to a csv file with the name my_solution.csv
write.csv(titanic_solution, file = "titanic_solution.csv", row.names = FALSE)
test <- read.csv(url("http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/test.csv"))
# Apply the model to the test data
predict.test <- predict(object = model.single, newdata = test, type = "class")
# Create a data frame with just PassengerId and Survived to submit to Kaggle. Note that I assign "predict.test" to "Survived"
titanic_solution <- data.frame(PassengerId = test$PassengerId, Survived = predict.test)
# Write your solution to a csv file with the name my_solution.csv
write.csv(titanic_solution, file = "titanic_solution.csv", row.names = FALSE)
help(str)
help(grid.raster)
getwd()
setwd("/Users/jburchell/projects/t-redactyl/content/")
knit("/Users/jburchell/Documents/Blog-posts/2015-10-13-manually-calculating-k-folds-cross-validation.Rmd", output = "2015-10-13-using-k-fold-cross-validation-to-estimate-out-of-sample-accuracy.md")
library(knitr)
knit("/Users/jburchell/Documents/Blog-posts/2015-10-13-manually-calculating-k-folds-cross-validation.Rmd", output = "2015-10-13-using-k-fold-cross-validation-to-estimate-out-of-sample-accuracy.md")
knit("/Users/jburchell/Documents/Blog-posts/2015-10-13-manually-calculating-k-folds-cross-validation.Rmd", output = "2015-10-13-using-k-fold-cross-validation-to-estimate-out-of-sample-accuracy.md")
knit("/Users/jburchell/Documents/Blog-posts/2015-10-13-manually-calculating-k-folds-cross-validation.Rmd", output = "2015-10-13-using-k-fold-cross-validation-to-estimate-out-of-sample-accuracy.md")
knit("/Users/jburchell/Documents/Blog-posts/2015-10-13-manually-calculating-k-folds-cross-validation.Rmd", output = "2015-10-13-using-k-fold-cross-validation-to-estimate-out-of-sample-accuracy.md")
knit("/Users/jburchell/Documents/Blog-posts/2015-10-13-manually-calculating-k-folds-cross-validation.Rmd", output = "2015-10-13-using-k-fold-cross-validation-to-estimate-out-of-sample-accuracy.md")
knit("/Users/jburchell/Documents/Blog-posts/2015-10-13-manually-calculating-k-folds-cross-validation.Rmd", output = "2015-10-13-using-k-fold-cross-validation-to-estimate-out-of-sample-accuracy.md")
knit("/Users/jburchell/Documents/Blog-posts/2015-10-13-manually-calculating-k-folds-cross-validation.Rmd", output = "2015-10-13-using-k-fold-cross-validation-to-estimate-out-of-sample-accuracy.md")
